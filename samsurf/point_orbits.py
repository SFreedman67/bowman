from sage.all import *
from samsurf.triangulation import Triangulation


def veech_action_on_points(trin, veech_elem, points_set, rgbcolor=(0, 0, 0)):
    """
    Returns the location of a set of points under action of an element
    of veech group
    Inputs:
    * trin: Triangulation object
    * veech_elem: Matrix
    must be in the Veech group of trin
    * points_set: set of (int, 3-tuple)
    The first int represents the triangle id, the 3-tuple represents
    barycentric coordinates in that triangle.
    Output:
    set of output_points represented as (int, 3-tuple),
    where each input point ends up in trin under action of veech_elem
    """
    trin_copy = trin
    for tri_id, pt_coords in points_set:
        trin_copy = trin_copy.mark_point(tri_id, pt_coords, rgbcolor)
        # mark all the points in points_list
    acted_trin = \
        trin_copy.apply_matrix(veech_elem).make_delaunay(equiv_trin=trin)
    # triangulation after action of the veech group and cut&paste
    output_points = set()
    for tri_id, marked_list in acted_trin.points_marked.items():
        for pt_coords, _ in marked_list:
            equiv_tri, equiv_coords = \
                trin.geom_equiv_relabel_point(acted_trin, tri_id, pt_coords)
            # find label of the acted point in terms of original triangulation
            output_points.add((equiv_tri, equiv_coords))
    return output_points


def points_preserved(trin, veech_elem, points_set):
    """
    Given a set of points on a triangulation and a veech group element,
    returns the subset of points which are stable under the action of the
    Veech subgroup generated by that veech group element.
    So if the orbit of a point under veech_elem is not entirely in points_set,
    it will not be in the output.
    """
    points_sofar = points_set  # The points stable so far
    points_old = set()  # Tracks the stable set one iteration ago
    while points_sofar != points_old:
        points_old = points_sofar
        output_points = veech_action_on_points(trin, veech_elem, points_sofar)
        points_sofar = points_sofar.intersection(output_points)
    return points_sofar


def reduce_periodic_points(trin, candidate_points, generators, debug=False):
    """
    Given a set candidate_points and triangulation trin,
    such that all periodic points of trin are in candidate_points
    returns the periodic points.
    """
    points_sofar = candidate_points  # the set of candidate periodic points
    for indx, veech_elem in enumerate(generators):

        points_sofar = points_preserved(trin, veech_elem, points_sofar)
        if debug:
            print("The veech element", indx, " is:\n", veech_elem)
            print("The number of preserved points are: ", len(points_sofar))
        # for each veech group generator, check which points have stable orbit
    return points_sofar
