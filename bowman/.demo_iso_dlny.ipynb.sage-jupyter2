{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-4a7d2fd6-c708-4513-bb00-6c1d417aa472.json","kernel":"sage-9.5","kernel_error":"","kernel_state":"idle","trust":true,"type":"settings"}
{"cell_type":"markdown","id":"7d5346","input":"### TODO\n\n- Define an interface for `halfplane`.\n- Implement codes in libflatsurf.\n","pos":1,"type":"cell"}
{"end":1650204759918,"exec_count":4,"id":"fe8138","input":"from flatsurf import *","kernel":"sage-9.5","pos":2,"start":1650204759704,"state":"done","type":"cell"}
{"end":1650204787878,"exec_count":5,"id":"8dca77","input":"s = translation_surfaces.regular_octagon()","kernel":"sage-9.5","pos":3,"start":1650204787685,"state":"done","type":"cell"}
{"end":1650204860288,"exec_count":7,"id":"7d9e5d","input":"t = s.delaunay_triangulation()","kernel":"sage-9.5","pos":4,"start":1650204860279,"state":"done","type":"cell"}
{"end":1650205252383,"exec_count":10,"id":"22da64","input":"t.plot()","kernel":"sage-9.5","output":{"0":{"data":{"image/png":"4b68d091e352a66d7d1c528540aed1ed27e5f525","text/plain":"Graphics object consisting of 33 graphics primitives"},"exec_count":10}},"pos":5,"start":1650205252240,"state":"done","type":"cell"}
{"end":1650212220001,"exec_count":22,"id":"925fcf","input":"# Things that go into constructing an IsoDelaunayRegion\nclass IsoDelaunayTesselation:\n    @classmethod\n    def local_delaunay_halfplane(cls, H, edge, triangulation): pass\n\nclass HyperbolicPlane:\n    def __init__(self, base_ring): pass\n    def intersection(self, subsets): pass\n\nH = HyperbolicPlane(t.base_ring())\n\nhalfplanes = [(hinge, IsoDelaunayTesselation.local_delaunay_halfplane(H, hinge, t))\n              for hinge in t.edge_iterator()\n              if t.triangle_flip(*hinge, test=True)]\n\npolygon = H.intersection([halfplane for (hinge, halfplane) in halfplanes])\n\n# TODO: Should be done more efficiently.\nhyperbolic_edge_to_hinges = {\n    hyperbolic_edge: [hinge\n           for (hinge, halfplane) in halfplanes\n           if halfplane in polygon.boundary()]\n    for hyperbolic_edge in polygon.edges()\n}","kernel":"sage-9.5","output":{"0":{"ename":"AttributeError","evalue":"'NoneType' object has no attribute 'edges'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_977/4003834380.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     21\u001b[0m            \u001b[0;32mfor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mhinge\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhalfplane\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhalfplanes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m            if halfplane in polygon.boundary()]\n\u001b[0;32m---> 23\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mhyperbolic_edge\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpolygon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0medges\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m }\n","\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'edges'"]}},"pos":6,"start":1650212219974,"state":"done","type":"cell"}
{"end":1650212295553,"exec_count":23,"id":"458112","input":"# Things that go into face()\nhyperbolic_edge = polygon.edges()[0]\n\ncross = t.copy()\nfor hinge in hyperbolic_edge_to_hinges[hyperbolic_edge]:\n    cross.triangel_flip(*hinge, in_place=True)\n\n# Run IDR algorithm from above to build the next polygon.","kernel":"sage-9.5","output":{"0":{"ename":"AttributeError","evalue":"'NoneType' object has no attribute 'edges'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_977/3897571088.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Things that go into face()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mhyperbolic_edge\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpolygon\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0medges\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mInteger\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mcross\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mhinge\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mhyperbolic_edge_to_hinges\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mhyperbolic_edge\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'edges'"]}},"pos":7,"start":1650212295525,"state":"done","type":"cell"}
{"exec_count":20,"id":"6f54d1","input":"# Finding (self-)similarities\n\n# TODO:\n# Count the automorphisms using codes; the resulting group is finite cyclic so generated by a rotation.\n# Determine existence of isomorphism using codes; find one isomorphism, ideally using codes.","kernel":"sage-9.5","pos":8,"state":"done","type":"cell"}
{"id":0,"time":1650212115068,"type":"user"}
{"last_load":1650204600754,"type":"file"}