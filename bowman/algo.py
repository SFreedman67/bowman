from collections import deque

import sage.all

from bowman.triangulation import Triangulation
from bowman.comb_equiv import gen_comb_equivs
from bowman.geom_equiv import gen_geom_equiv
from bowman.mobius import apply_mobius

'''
Compute R0 from T0
Add Edges of R0 to Queue
While Q:
    Pop top
    Cross the edge into Ri
    If Ri equiv to previous Rj:
        Add the equivalence
        (Find image edge and remove it)
    Else:
        Include in FundDom
        Add edges to Q
'''


def sigma(mat):
    [[a, b], [c, d]] = mat
    return sage.all.matrix([[a, -b], [-c, d]])


def get_veech_equivs(ri, rj):
    ti, tj = ri.triangulation, rj.triangulation
    ces_ij = gen_comb_equivs(ti, tj)
    return list(filter(lambda x: x is not None,
                       (gen_geom_equiv(ti, tj, ce) for ce in ces_ij)))


def generators_veech(trin: Triangulation) -> sage.all.MatrixGroup:
    """
    Find a generating set for the Veech group of trin
    :param trin:
    :rtype: MatrixGroup
    :return: MatrixGroup generated by the generators found
    """
    r0 = trin.get_idr
    polygons_visited = {r0.polygon}
    edges_crossed = set()
    edges_zipped = set()
    idrs_to_visit = deque([r0])
    fund_dom = [r0]
    gens = []

    while idrs_to_visit:
        idr_curr = idrs_to_visit.pop()
        for idx, edge in enumerate(idr_curr.polygon.edges):
            if edge not in edges_crossed and edge.endpoints not in edges_zipped:
                edges_crossed |= {edge, edge.reverse()}
                neighbor = idr_curr.cross_segment(idx)
                if neighbor.polygon not in polygons_visited:
                    polygons_visited.add(neighbor.polygon)
                    ves = [ve for r in fund_dom
                           for ve in get_veech_equivs(neighbor, r)]
                    if ves:
                        m = sigma(ves[0])
                        edges_zipped |= {(apply_mobius(m, edge.start),
                                         apply_mobius(m, edge.end)),
                                         (apply_mobius(m,  edge.end),
                                          apply_mobius(m, edge.start))}
                        gens.append(m)
                    else:
                        fund_dom.append(neighbor)
                        idrs_to_visit.appendleft(neighbor)
    print(f"len(fund_dom)={len(fund_dom)}")
    print(f"num_gens = {len(gens)}")
    return sage.all.MatrixGroup(gens)


if __name__ == "__main__":
    pass
