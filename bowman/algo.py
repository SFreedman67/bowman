from collections import deque

import sage.all

from bowman.triangulation import Triangulation
from bowman.comb_equiv import gen_comb_equivs
from bowman.geom_equiv import gen_geom_equiv

'''
Compute R0 from T0
Add Edges of R0 to Queue
While Q:
    Pop top
    Cross the edge into Ri
    If Ri equiv to previous Rj:
        Add the equivalence
        (Find image edge and remove it)
    Else:
        Include in FundDom
        Add edges to Q
'''


def sigma(mat):
    [[a, b], [c, d]] = mat
    return sage.all.matrix([[a, -b], [-c, d]])


def get_veech_equivs(ri, rj):
    ti, tj = ri.triangulation, rj.triangulation
    ces_ij = gen_comb_equivs(ti, tj)
    return list(filter(lambda x: x is not None,
                       (gen_geom_equiv(ti, tj, ce) for ce in ces_ij)))


def generators_veech(trin: Triangulation) -> sage.all.MatrixGroup:
    """
    Find a generating set for the Veech group of trin
    :param trin:
    :rtype: MatrixGroup
    :return: MatrixGroup generated by the generators found
    """
    r0 = trin.get_idr
    polygons_visited = {r0.polygon}
    queue = deque([r0])
    fund_dom = [r0]
    gens = []

    while queue:
        idr_curr = queue.pop()
        for neighbor in (x for x in idr_curr.neighbors
                         if x.polygon not in polygons_visited):
            polygons_visited.add(neighbor.polygon)
            ves = [ve for r in fund_dom
                   for ve in get_veech_equivs(neighbor, r)]
            if ves:
                gens.append(sigma(ves[0]))
            else:
                fund_dom.append(neighbor)
                queue.appendleft(neighbor)
    print(f"len(fund_dom)={len(fund_dom)}")
    print(f"num_gens = {len(gens)}")
    return sage.all.MatrixGroup(gens)


if __name__ == "__main__":
    pass
