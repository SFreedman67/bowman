{"backend_state":"ready","kernel":"sage-9.5","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"}},"trust":false,"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"05cb73","input":"import itertools\nfrom context import bowman\nfrom bowman.triangulation import Triangulation\nfrom bowman.point_orbits import *","metadata":{"jupyter":{"outputs_hidden":false}},"pos":0,"scrolled":true,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"452fa7","input":"ronen44 = Triangulation.ronen_l(20)\nveech_gens_list = ronen44.generators_veech.gens\nprint(\"Number of generators: \", len(veech_gens_list))\n\n# find a veech group element that is the product of sheers, then raise to a power if needed.\nveech_elem = veech_gens_list[3] * veech_gens_list[2] \n#veech_elem = veech_elem**2\nprint(\"Veech element:\\n\", veech_elem)","metadata":{"jupyter":{"outputs_hidden":false}},"output":{"0":{"name":"stdout","output_type":"stream","text":"Number of generators:  9\nVeech element:\n [-1/2*a - 2  -3*a - 15]\n[ 2/5*a + 2 5/2*a + 14]\n"}},"pos":2,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"3588e2","input":"# compute the set of candidate periodic points.\ncandidate_points = set()\nprint(\"There are \", len(ronen44.triangles), \" triangles in the table.\")\nfor i in range(len(ronen44.triangles)):\n    print(\"Computing for triangle \", i)\n    tri_points = ronen44.compute_candidate_periodic_points(i, veech_elem)\n    for point in tri_points:\n        reformatted = (i, point)\n        candidate_points.add(reformatted)","output":{"0":{"name":"stdout","output_type":"stream","text":"There are  6  triangles in the table.\nComputing for triangle  0\nComputing for triangle  1\nComputing for triangle  2\nComputing for triangle  3\nComputing for triangle  4\nComputing for triangle  5\n"}},"pos":3,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"10ed48","input":"# Now use the collection of candidate periodic points and the generators to find the periodic points\ndef mark_points(trin, points_set, rgbcolor=(0, 0, 0)):\n    trin_copy = trin\n    for tri_id, pt_coords in points_set:\n        trin_copy = trin_copy.mark_point(tri_id, pt_coords, rgbcolor)\n    return trin_copy\n\n# this block runs the algorithm on all elements of the veech generators list to reduce to periodic points.\npreserved_pts = reduce_periodic_points(ronen44, candidate_points, veech_gens_list)\nmark_points(ronen44, preserved_pts).plot().show()\nprint(\"The preserved points are \", preserved_pts)","output":{"0":{"data":{"image/png":"08dc6dcbfccb8b9a1101e7f44b12ef560a85d911","text/plain":"Graphics object consisting of 40 graphics primitives"},"output_type":"display_data"},"1":{"name":"stdout","output_type":"stream","text":"The preserved points are  {(4, (0, 1/2, 1/2)), (0, (0, 1/2, 1/2)), (2, (0, 1/2, 1/2)), (3, (0, 1/2, 1/2)), (5, (0, 1/2, 1/2)), (2, (1/2, 0, 1/2)), (4, (1/2, 1/2, 0)), (1, (0, 1/2, 1/2))}\n"}},"pos":4,"state":"done","type":"cell"}
{"cell_type":"code","id":"22e2b7","input":"# as can be seen by the following output, it is sufficient to just apply\n# a single veech element and get the entire collection of periodic points\npreserved_pts = points_preserved(ronen44, veech_gens_list[0], candidate_points)\nmark_points(ronen44, preserved_pts).plot().show()","pos":6,"state":"done","type":"cell"}
{"cell_type":"code","id":"bac992","input":"","pos":7,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"051ace","input":"### Apply just a single veech group element\nThe following allows for just applying a single element to the candidate points and checking to see what happens.","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"96a0df","input":"## Computing periodic points\nThis notebook supports implementation of computing the periodic points of the Ronen L.","pos":1,"state":"done","type":"cell"}
{"id":0,"time":1647427418997,"type":"user"}
{"last_load":1647427419652,"type":"file"}